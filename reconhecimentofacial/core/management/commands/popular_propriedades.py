"""
Comando Django para popular o banco de dados com 30 propriedades rurais
com diferentes n√≠veis de acesso (1, 2 e 3).

Uso: python manage.py popular_propriedades
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from core.models import PropriedadeRural
from decimal import Decimal
import random
from datetime import datetime, timedelta


class Command(BaseCommand):
    help = 'Popula o banco de dados com 30 propriedades rurais com diferentes n√≠veis de impacto'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limpar',
            action='store_true',
            help='Remove todas as propriedades antes de criar novas',
        )

    def handle(self, *args, **options):
        # Se a flag --limpar for passada, remove todas as propriedades
        if options['limpar']:
            count = PropriedadeRural.objects.all().count()
            PropriedadeRural.objects.all().delete()
            self.stdout.write(
                self.style.WARNING(f'üóëÔ∏è  {count} propriedades removidas do banco de dados')
            )

        # Verificar se existe pelo menos um usu√°rio para associar
        usuario = User.objects.first()
        if not usuario:
            self.stdout.write(
                self.style.ERROR('‚ùå Nenhum usu√°rio encontrado. Crie um usu√°rio primeiro!')
            )
            return

        # Lista de estados brasileiros
        estados = ['SP', 'MG', 'RJ', 'BA', 'RS', 'PR', 'SC', 'GO', 'MS', 'MT', 'PA', 'AM', 'TO']
        
        # Lista de cidades brasileiras
        cidades = [
            'S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Porto Alegre',
            'Curitiba', 'Florian√≥polis', 'Goi√¢nia', 'Campo Grande', 'Cuiab√°',
            'Bel√©m', 'Manaus', 'Palmas', 'Bras√≠lia', 'Vit√≥ria'
        ]
        
        # Lista de agrot√≥xicos proibidos (exemplos)
        agrotoxicos = [
            'Paraquat', 'Carbofurano', 'Endossulfan', 'Metamidof√≥s', 'Aldicarbe',
            'Forato', 'Parationa Met√≠lica', 'Monocrotof√≥s', 'Triclorfom', 'DDT',
            'Aldrin', 'Dieldrin', 'Heptacloro', 'Mirex', 'Clordano'
        ]
        
        # Nomes de propriedades
        nomes_fazendas = [
            'Fazenda Santa Maria', 'S√≠tio Boa Vista', 'Fazenda S√£o Jos√©',
            'Rancho Alegre', 'Fazenda Primavera', 'S√≠tio Para√≠so',
            'Fazenda Esperan√ßa', 'Ch√°cara Nova Vida', 'Fazenda Monte Verde',
            'S√≠tio Recanto Verde', 'Fazenda Bela Vista', 'Rancho do Sol',
            'Fazenda Campo Limpo', 'S√≠tio √Ågua Clara', 'Fazenda Tr√™s Irm√£os',
            'Est√¢ncia S√£o Pedro', 'Fazenda Serra Azul', 'S√≠tio Flor do Campo',
            'Fazenda Vale Verde', 'Rancho Feliz', 'Fazenda Ribeir√£o',
            'S√≠tio Girassol', 'Fazenda Palmeiras', 'Ch√°cara do Lago',
            'Fazenda Horizonte', 'S√≠tio P√¥r do Sol', 'Fazenda Alvorada',
            'Rancho Grande', 'Fazenda Rio Claro', 'S√≠tio Ventania'
        ]
        
        # Nomes de propriet√°rios
        nomes = [
            'Jo√£o Silva', 'Maria Santos', 'Carlos Oliveira', 'Ana Costa',
            'Pedro Almeida', 'Juliana Ferreira', 'Roberto Souza', 'Fernanda Lima',
            'Marcos Pereira', 'Patr√≠cia Rodrigues', 'Jos√© Martins', 'Carla Mendes',
            'Antonio Barbosa', 'Lucia Cardoso', 'Paulo Ribeiro', 'Sandra Ara√∫jo',
            'Ricardo Gomes', 'Beatriz Castro', 'Fernando Dias', 'Cristina Moreira',
            'Luiz Cunha', 'M√°rcia Correia', 'Eduardo Teixeira', 'Renata Pinto',
            'Francisco Ramos', 'Gabriela Vieira', 'Andr√© Monteiro', 'Camila Freitas',
            'Rafael Carvalho', 'Adriana Nunes'
        ]
        
        # Descri√ß√µes de impacto por n√≠vel
        descricoes_nivel_1 = [
            'Contamina√ß√£o leve detectada em an√°lises pontuais do len√ßol fre√°tico. Necess√°rio monitoramento.',
            'Presen√ßa de res√≠duos em baixa concentra√ß√£o pr√≥ximo √† √°rea de plantio.',
            'Impacto localizado com potencial de recupera√ß√£o natural em m√©dio prazo.',
        ]
        
        descricoes_nivel_2 = [
            'Contamina√ß√£o moderada dos recursos h√≠dricos com afeta√ß√£o de c√≥rregos pr√≥ximos.',
            'Presen√ßa significativa de res√≠duos qu√≠micos em an√°lises do solo e √°gua subterr√¢nea.',
            'Impacto sobre fauna aqu√°tica local, com redu√ß√£o da biodiversidade observada.',
        ]
        
        descricoes_nivel_3 = [
            'Contamina√ß√£o severa com comprometimento de rios principais da regi√£o.',
            'Alto √≠ndice de toxicidade detectado em m√∫ltiplos pontos de coleta, afetando comunidades ribeirinhas.',
            'Impacto cr√≠tico em ecossistemas aqu√°ticos com mortandade de peixes e comprometimento de aqu√≠feros.',
        ]

        self.stdout.write(self.style.SUCCESS('üå± Iniciando cadastro de 30 propriedades...'))
        self.stdout.write('')

        propriedades_criadas = 0
        
        # Criar 10 propriedades de cada n√≠vel (1, 2 e 3)
        for nivel in [1, 2, 3]:
            self.stdout.write(f'üìä Criando 10 propriedades de N√≠vel {nivel}...')
            
            for i in range(10):
                idx = (nivel - 1) * 10 + i
                
                # Selecionar descri√ß√£o baseada no n√≠vel
                if nivel == 1:
                    descricao = random.choice(descricoes_nivel_1)
                elif nivel == 2:
                    descricao = random.choice(descricoes_nivel_2)
                else:
                    descricao = random.choice(descricoes_nivel_3)
                
                # Gerar CPF/CNPJ fict√≠cio
                if random.choice([True, False]):
                    # CPF: 000.000.000-00
                    cpf_cnpj = f"{random.randint(100, 999)}.{random.randint(100, 999)}.{random.randint(100, 999)}-{random.randint(10, 99)}"
                else:
                    # CNPJ: 00.000.000/0000-00
                    cpf_cnpj = f"{random.randint(10, 99)}.{random.randint(100, 999)}.{random.randint(100, 999)}/{random.randint(1000, 9999)}-{random.randint(10, 99)}"
                
                # Gerar coordenadas geogr√°ficas (Brasil)
                latitude = Decimal(str(random.uniform(-33.75, 5.27))).quantize(Decimal('0.000001'))
                longitude = Decimal(str(random.uniform(-73.99, -34.79))).quantize(Decimal('0.000001'))
                
                # √Årea em hectares (varia conforme o n√≠vel)
                if nivel == 1:
                    area = Decimal(str(random.uniform(10, 100))).quantize(Decimal('0.01'))
                elif nivel == 2:
                    area = Decimal(str(random.uniform(100, 500))).quantize(Decimal('0.01'))
                else:
                    area = Decimal(str(random.uniform(500, 2000))).quantize(Decimal('0.01'))
                
                # Data de identifica√ß√£o (√∫ltimos 2 anos)
                dias_atras = random.randint(0, 730)
                data_identificacao = datetime.now().date() - timedelta(days=dias_atras)
                
                # Criar a propriedade
                propriedade = PropriedadeRural.objects.create(
                    nome_propriedade=nomes_fazendas[idx],
                    proprietario=nomes[idx],
                    cpf_cnpj=cpf_cnpj,
                    endereco=f"Rodovia {random.choice(['BR', 'SP', 'MG'])}-{random.randint(100, 999)}, Km {random.randint(1, 200)}",
                    cidade=random.choice(cidades),
                    estado=random.choice(estados),
                    area_hectares=area,
                    agrotoxico_utilizado=random.choice(agrotoxicos),
                    nivel_impacto=nivel,
                    descricao_impacto=descricao,
                    data_identificacao=data_identificacao,
                    latitude=latitude,
                    longitude=longitude,
                    usuario_cadastro=usuario,
                    ativo=True
                )
                
                propriedades_criadas += 1
                
                # Feedback visual a cada 5 propriedades
                if propriedades_criadas % 5 == 0:
                    self.stdout.write(f'  ‚úì {propriedades_criadas}/30 propriedades criadas')

        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('=' * 60))
        self.stdout.write(self.style.SUCCESS(f'‚úÖ SUCESSO! {propriedades_criadas} propriedades cadastradas!'))
        self.stdout.write(self.style.SUCCESS('=' * 60))
        self.stdout.write('')
        
        # Resumo por n√≠vel
        self.stdout.write('üìà Resumo por N√≠vel de Impacto:')
        for nivel in [1, 2, 3]:
            count = PropriedadeRural.objects.filter(nivel_impacto=nivel).count()
            nivel_nome = dict(PropriedadeRural.NIVEL_CHOICES)[nivel]
            emoji = 'üü¢' if nivel == 1 else 'üü°' if nivel == 2 else 'üî¥'
            self.stdout.write(f'  {emoji} {nivel_nome}: {count} propriedades')
        
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üéâ Banco de dados populado com sucesso!'))
        self.stdout.write(self.style.WARNING('üí° Dica: Use --limpar para remover todas antes de criar novas'))
